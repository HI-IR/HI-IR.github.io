<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>java基础之集合</title>
      <link href="/2025/01/08/java%E5%9F%BA%E7%A1%80%E4%B9%8B%E9%9B%86%E5%90%88/"/>
      <url>/2025/01/08/java%E5%9F%BA%E7%A1%80%E4%B9%8B%E9%9B%86%E5%90%88/</url>
      
        <content type="html"><![CDATA[<h1 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h1><h2 id="为什么使用泛型"><a href="#为什么使用泛型" class="headerlink" title="为什么使用泛型"></a>为什么使用泛型</h2><blockquote><p>泛型是一种推广化和限制化</p><p>泛型是一种<strong>推广化</strong>。它允许代码在更广泛的类型上工作，而不是局限于特定的类型</p><p>泛型是一种<strong>限制化</strong>。通过指定泛型类型，限制了在该类型参数位置可以使用的类型</p></blockquote><h2 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h2><h3 id="泛型类的定义"><a href="#泛型类的定义" class="headerlink" title="泛型类的定义"></a>泛型类的定义</h3><blockquote><p>类型参数用于类的定义中，则该类被称为泛型类。</p><p>最典型的就是各种容器类，如：List、Set、Map等。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">class 类名&lt;泛型标识&gt;&#123;</span><br><span class="line"><span class="keyword">private</span> 泛型标识 <span class="comment">/*（成员变量类型）*/</span> 变量名; </span><br><span class="line">  .....</span><br><span class="line">  &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>常见的泛型标识如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">T ：代表一般的任何类。</span><br><span class="line">E ：代表 Element 元素的意思，或者 Exception 异常的意思。</span><br><span class="line">K ：代表 Key 的意思。</span><br><span class="line">V ：代表 Value 的意思，通常与 K 一起配合使用。</span><br></pre></td></tr></table></figure></blockquote><p>**注意：**泛型是没有多态的</p><h1 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><h3 id="Java集合分为2种体系"><a href="#Java集合分为2种体系" class="headerlink" title="Java集合分为2种体系"></a>Java集合分为2种体系</h3><ol><li>单一数据体系: Collection接口</li><li>成对出现的数据体系     键值对数据（key , value） Map接口</li></ol><h2 id="Collection"><a href="#Collection" class="headerlink" title="Collection"></a>Collection</h2><h3 id="List"><a href="#List" class="headerlink" title="List"></a>List</h3><p>​按照插入顺序保存数据，数据可以重复</p><p>​具体实现类：ArrayListLinkedList</p><h4 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h4><h5 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ArrayList</span> <span class="variable">list</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br></pre></td></tr></table></figure><ol><li>参数构造，底层数组为空数组</li><li>构造函数传递一个int类型的数据，用于设定底层数组的长度</li><li>构造函数传递一个Collection集合类型的值，用于将其他集合中的数据放置在当前集合中</li></ol><h5 id="增"><a href="#增" class="headerlink" title="增"></a>增</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="title function_">add</span><span class="params">(Object element)</span>;</span><br><span class="line"><span class="comment">//在集合最后面加入元素</span></span><br><span class="line"></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> index,Object element)</span></span><br><span class="line"><span class="comment">//在指定位置插入元素</span></span><br></pre></td></tr></table></figure><p>*注意扩容</p><h5 id="删"><a href="#删" class="headerlink" title="删"></a>删</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Object</span> <span class="variable">removeVal</span> <span class="operator">=</span> list.remove(<span class="type">int</span> index);</span><br><span class="line"><span class="comment">//该方法返回结果，这个结果是删除的值</span></span><br></pre></td></tr></table></figure><h5 id="改"><a href="#改" class="headerlink" title="改"></a>改</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Object</span> <span class="variable">oldVal</span> <span class="operator">=</span>list.set(<span class="type">int</span> index,Object element);</span><br><span class="line"><span class="comment">//该方法返回结果，这个结果是更新前的值</span></span><br></pre></td></tr></table></figure><h5 id="查"><a href="#查" class="headerlink" title="查"></a>查</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//访问数组长度</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">size</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取指定位置的数据</span></span><br><span class="line">E <span class="title function_">get</span><span class="params">(<span class="type">int</span> index)</span>;</span><br></pre></td></tr></table></figure><h5 id="其他常用方法"><a href="#其他常用方法" class="headerlink" title="其他常用方法"></a>其他常用方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">//集合中的数据是否为空</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">clear</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">//清空集合中的数据</span></span><br><span class="line"></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">removeAll</span><span class="params">(Collection&lt;?&gt;c)</span>;</span><br><span class="line"><span class="comment">//删除指定集合的数据</span></span><br><span class="line"></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">contains</span><span class="params">(Object element)</span>;</span><br><span class="line"><span class="comment">//集合中是否存在元素element</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">indexof</span><span class="params">(Object element)</span>;</span><br><span class="line"><span class="comment">//用于获取数据在集合中第一个索引位置</span></span><br><span class="line"><span class="comment">//如果数据不存在，则返回-1</span></span><br><span class="line"><span class="comment">//如果有2个同样的element，则返回第一个索引</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Object[] toArray();</span><br><span class="line"><span class="comment">//把ArrayList变成Array数组</span></span><br><span class="line"></span><br><span class="line">Object <span class="title function_">clone</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">//克隆ArrayList</span></span><br></pre></td></tr></table></figure><h4 id="LinkedList-双向链表"><a href="#LinkedList-双向链表" class="headerlink" title="LinkedList(双向链表)"></a>LinkedList(双向链表)</h4><h5 id="构造方法-1"><a href="#构造方法-1" class="headerlink" title="构造方法"></a>构造方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">LinkedList&lt;E&gt; list = <span class="keyword">new</span> <span class="title class_">LinkedList</span>();</span><br><span class="line"><span class="comment">//无参构造</span></span><br><span class="line"><span class="comment">//有参构造 传入一个Collection数据</span></span><br></pre></td></tr></table></figure><h5 id="增-1"><a href="#增-1" class="headerlink" title="增"></a>增</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="title function_">add</span><span class="params">(Object element)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> index,Object element)</span>;</span><br><span class="line"><span class="comment">//插入法</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">addFirst</span><span class="params">(Object element)</span>;</span><br></pre></td></tr></table></figure><h5 id="获取数据"><a href="#获取数据" class="headerlink" title="获取数据"></a>获取数据</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">E <span class="title function_">getFirst</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">//获取头指针指向的元素</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">E <span class="title function_">getLast</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">//获取尾指针指向的元素</span></span><br><span class="line"></span><br><span class="line">E <span class="title function_">get</span><span class="params">(<span class="type">int</span> index)</span></span><br></pre></td></tr></table></figure><h5 id="改-1"><a href="#改-1" class="headerlink" title="改"></a>改</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">E <span class="title function_">set</span><span class="params">(<span class="type">int</span> index,Object element)</span>;</span><br></pre></td></tr></table></figure><h5 id="删-1"><a href="#删-1" class="headerlink" title="删"></a>删</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="title function_">remove</span><span class="params">(<span class="type">int</span> index)</span>;</span><br><span class="line"></span><br><span class="line">E <span class="title function_">removeFirst</span><span class="params">()</span>;</span><br><span class="line">E <span class="title function_">remove</span><span class="params">()</span>;<span class="comment">//删除第一个</span></span><br><span class="line"></span><br><span class="line">E <span class="title function_">removeLast</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">remove</span><span class="params">(Object element)</span></span><br></pre></td></tr></table></figure><h5 id="其他常用方法-1"><a href="#其他常用方法-1" class="headerlink" title="其他常用方法"></a>其他常用方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">push</span><span class="params">(Object element)</span>;</span><br><span class="line"><span class="comment">//等同于 list.addFirst()</span></span><br><span class="line"></span><br><span class="line">E <span class="title function_">pop</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">//弹出数据</span></span><br></pre></td></tr></table></figure><h4 id="排序（sort）"><a href="#排序（sort）" class="headerlink" title="排序（sort）"></a>排序（sort）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NumberComparator</span> <span class="keyword">implements</span> <span class="title class_">Comparator</span>&lt;Integer&gt; &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">    </span><br><span class="line">   </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Integer o1,Integer o2)</span>&#123;</span><br><span class="line">        <span class="comment">//如果第一个数比第二个数大，则返回结果为正数，标识升序</span></span><br><span class="line">        <span class="comment">//如果第一个数比第二个数小，则返回结果为负数，标识降序</span></span><br><span class="line">        <span class="comment">//如果第一个数比第二个数相等，则返回结果0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">list.sort();</span><br><span class="line"><span class="comment">//需要传入一个实现了比较器Comparator接口的对象</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="Comparator比较器中compare的规则"><a href="#Comparator比较器中compare的规则" class="headerlink" title="Comparator比较器中compare的规则"></a>Comparator比较器中compare的规则</h5><p>**规则:**返回结果为正时，交换顺序，返回值为负时不交换顺序</p><h3 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h3><p>​集，无顺保存，数据不能重复</p><p>​具体实现类：HashSet</p><h4 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h4><p>放入的数据会通过Hash算法得到不同的index，我们并不能知道一个element对应的经过Hash算法后的index，所以对于我们而言是无序的，相同的element经过Hash得到的index是一样的，HashSet所以数据是不能重复的</p><p>添加一个数据时，先经过Hash算法获得index,按照index放入相对应的数组位置中，如果2个不相同的元素，经过该算法获得了相同的index那么HashSet将会运行equal来判断2个元素是否相等，相等则不改变set，不相等时会采用链表的方法将2值连在一起</p><p><strong>HashSet的底层为 数组+链表的形式</strong></p><blockquote><p><strong>对象重复的判断标准：</strong></p><p>对象HashCode相不相同（内存地址）</p><p>HashCode不相同，则不重复</p><p>HashCode相同，则重复</p></blockquote><blockquote><p><strong>注:</strong></p><p>HashCode的算法可以自己修改，以达到判断是否相同的目的</p></blockquote><h5 id="更改判断标准"><a href="#更改判断标准" class="headerlink" title="更改判断标准"></a>更改判断标准</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>&#123;</span><br><span class="line">    <span class="type">int</span> id;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(<span class="type">int</span> id, String name)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span> == o) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (!(o <span class="keyword">instanceof</span> User user)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> id == user.id &amp;&amp; name.equals(user.name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="构造方法-2"><a href="#构造方法-2" class="headerlink" title="构造方法"></a>构造方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HashSet&lt;E&gt; set =<span class="keyword">new</span> <span class="title class_">HashSet</span>();</span><br></pre></td></tr></table></figure><h5 id="增-2"><a href="#增-2" class="headerlink" title="增"></a>增</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">set.add(Object element);</span><br><span class="line"><span class="comment">//添加单个元素</span></span><br><span class="line"></span><br><span class="line">set.addAll(Collection c);</span><br><span class="line"><span class="comment">//添加一个集合的元素</span></span><br></pre></td></tr></table></figure><h5 id="删-2"><a href="#删-2" class="headerlink" title="删"></a>删</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set.remove(E element);</span><br></pre></td></tr></table></figure><h5 id="改-2"><a href="#改-2" class="headerlink" title="改"></a>改</h5><p>**注:**HashSet中没有改的操作</p><h5 id="查-1"><a href="#查-1" class="headerlink" title="查"></a>查</h5><p>**注:**HashSet中没有查的操作</p><h5 id="其他常用方法-2"><a href="#其他常用方法-2" class="headerlink" title="其他常用方法"></a>其他常用方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Object[] set.toArray();</span><br><span class="line"><span class="comment">//将set转化为数组</span></span><br><span class="line"></span><br><span class="line">set.clear();</span><br><span class="line">set.isEmpty();</span><br><span class="line"> </span><br><span class="line"><span class="type">boolean</span> set.contains(Object element);</span><br><span class="line"><span class="type">boolean</span> set.containsAll(Collection c);</span><br></pre></td></tr></table></figure><h3 id="Queue"><a href="#Queue" class="headerlink" title="Queue"></a>Queue</h3><p>​队列</p><p>​具体实现类：ArrayBlockingQueue</p><h4 id="ArrayBlockingQueue"><a href="#ArrayBlockingQueue" class="headerlink" title="ArrayBlockingQueue"></a>ArrayBlockingQueue</h4><p>ArrayBlockingQueue&#x3D;Array(数组)+Blocking(阻塞,队列有限)+Queue（队列）</p><h5 id="构造方法-3"><a href="#构造方法-3" class="headerlink" title="构造方法"></a>构造方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ArrayBlockingQueue</span> <span class="variable">queue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayBlockingQueue</span>(<span class="type">int</span> size);<span class="comment">//输入容量</span></span><br></pre></td></tr></table></figure><h5 id="增-3"><a href="#增-3" class="headerlink" title="增"></a>增</h5><h6 id="add方法"><a href="#add方法" class="headerlink" title="add方法"></a>add方法</h6><blockquote><p>在队列的尾部添加元素，返回true。当队列满的时候会抛出IllegalStateException异常。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="title function_">add</span><span class="params">(E e)</span></span><br></pre></td></tr></table></figure><h6 id="put方法"><a href="#put方法" class="headerlink" title="put方法"></a>put方法</h6><blockquote><p>在队列的尾部添加元素，如果队列已满，则会阻塞住，等待队列有空闲位置，该方法可被打断。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">put</span><span class="params">(E e)</span> <span class="keyword">throws</span> InterruptedException</span><br></pre></td></tr></table></figure><h6 id="offer方法"><a href="#offer方法" class="headerlink" title="offer方法"></a>offer方法</h6><blockquote><p>超出队列最大值，不会报错，返回false</p><ul><li>e：添加的元素</li><li>timeout：最多等待的时长</li><li>unit：时间单位</li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="title function_">offer</span><span class="params">(E e)</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">offer</span><span class="params">(E e, <span class="type">long</span> timeout, TimeUnit unit)</span> <span class="keyword">throws</span> InterruptedException</span><br><span class="line"><span class="comment">//添加数据成功，则返回true</span></span><br><span class="line"><span class="comment">//添加数据失败，则返回false</span></span><br></pre></td></tr></table></figure><h5 id="取"><a href="#取" class="headerlink" title="取"></a>取</h5><h6 id="poll方法"><a href="#poll方法" class="headerlink" title="poll方法"></a>poll方法</h6><blockquote><p>先进先出</p><p>获取队列中队首的元素，获取后该元素就会移除该队列</p></blockquote><ul><li>timeout：等待时长</li><li>unit：时间单位</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//立即返回</span></span><br><span class="line">E <span class="title function_">poll</span><span class="params">()</span></span><br><span class="line"><span class="comment">//如果不能立即取出，则等待一定时间</span></span><br><span class="line">E <span class="title function_">poll</span><span class="params">(<span class="type">long</span> timeout, TimeUnit unit)</span> <span class="keyword">throws</span> InterruptedException</span><br></pre></td></tr></table></figure><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">queue.offer(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">queue.offer(<span class="string">&quot;李四&quot;</span>);</span><br><span class="line">queue.offer(<span class="string">&quot;王五&quot;</span>);</span><br><span class="line">System.out.println(queue.poll());</span><br><span class="line">System.out.println(queue);</span><br></pre></td></tr></table></figure><p>输出为</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">张三</span><br><span class="line">[李四, 王五]</span><br></pre></td></tr></table></figure></blockquote><p>**注：**当队列里面所有数据全部取出后，继续取出queue.poll(),则返回null</p><h6 id="take方法"><a href="#take方法" class="headerlink" title="take方法"></a>take方法</h6><blockquote><p>获取队列中的元素，如果没有则会被阻塞住。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">E <span class="title function_">take</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException</span><br></pre></td></tr></table></figure><h6 id="peek方法"><a href="#peek方法" class="headerlink" title="peek方法"></a>peek方法</h6><blockquote><p>读取队列中队首的元素，不会删除该元素。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">E <span class="title function_">peek</span><span class="params">()</span></span><br></pre></td></tr></table></figure><h5 id="删-3"><a href="#删-3" class="headerlink" title="删"></a>删</h5><h6 id="remove方法"><a href="#remove方法" class="headerlink" title="remove方法"></a>remove方法</h6><blockquote><p>删除队列中指定元素</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="title function_">remove</span><span class="params">(Object o)</span></span><br></pre></td></tr></table></figure><h5 id="其他方法"><a href="#其他方法" class="headerlink" title="其他方法"></a>其他方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="title function_">contains</span><span class="params">(Object o)</span>;<span class="comment">//查询队列中是否存在某个元素</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">remainingCapacity</span><span class="params">()</span>;<span class="comment">//返回队列中剩余空闲位置</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">drainTo</span><span class="params">(Collection&lt;? <span class="built_in">super</span> E&gt; c)</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">drainTo</span><span class="params">(Collection&lt;? <span class="built_in">super</span> E&gt; c, <span class="type">int</span> maxElements)</span>;</span><br><span class="line"><span class="comment">//将队列中的元素排到指定集合中</span></span><br><span class="line"><span class="comment">//c：目标集合</span></span><br><span class="line"><span class="comment">//maxElements：最多排几个元素</span></span><br></pre></td></tr></table></figure><h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><p>具体实现：HashMap，Hastable</p><h3 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h3><blockquote><p><code>HashMap</code>是一个散列表，它存储键值对（key-value pairs），每个键对应一个唯一的值。<code>HashMap</code>不保证顺序，并且允许<code>null</code>值作为键或值。</p></blockquote><h4 id="构造方法-4"><a href="#构造方法-4" class="headerlink" title="构造方法"></a>构造方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HashMap&lt;Integer, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br></pre></td></tr></table></figure><h4 id="增-改"><a href="#增-改" class="headerlink" title="增 改"></a>增 改</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">E <span class="title function_">put</span><span class="params">(K key, V value)</span>;</span><br><span class="line"><span class="comment">//获取与指定键 key 相关联的前一个值。如果不存在针对该键 key 的映射关系，那么就返回 null</span></span><br></pre></td></tr></table></figure><blockquote><p>改动value时</p><p>接下来我们探讨Key的值不可重复（当Key的值重复的时候，后面插入的对象会将之前插入的具有相同的Key值的对象覆盖掉），Value的值可重复</p></blockquote><h4 id="查-2"><a href="#查-2" class="headerlink" title="查"></a>查</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">V <span class="title function_">get</span><span class="params">(K key)</span>;</span><br></pre></td></tr></table></figure><h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><blockquote><p>返回被删除的键值对的值</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">K <span class="title function_">remove</span><span class="params">(K key)</span>;</span><br></pre></td></tr></table></figure><h4 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(String key : map.keySet())&#123;</span><br><span class="line">    System.out.println(key + <span class="string">&quot;=&quot;</span> + map.get(key));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h4><p><code>containsValue</code>:判断<code>HashMap</code>是否包含指定的值，返回<code>true</code>或者<code>false</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="title function_">containsValue</span><span class="params">(V value)</span></span><br></pre></td></tr></table></figure><p><code>keySet()</code>:返回<code>HashMap</code>中所有键的<code>Set</code>视图。通过这个<code>Set</code>可以遍历<code>HashMap</code>中的所有键</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Set&lt;K&gt; <span class="title function_">keySet</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><p><code>values()</code>:返回<code>HashMap</code>中所有值的<code>Collection</code>视图。可以用于遍历<code>HashMap</code>中的所有值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Collection&lt;V&gt; <span class="title function_">values</span><span class="params">()</span>；</span><br></pre></td></tr></table></figure><p><code>entrySet()</code>:返回<code>HashMap</code>中所有键值对的<code>Set</code>视图，其中每个元素都是<code>Map.Entry</code>类型。可以用于同时遍历键和值</p><blockquote><p>通过遍历这个<code>Set</code>，可以同时访问<code>HashMap</code>中的键和值，这在需要对键值对进行操作（如打印、修改或删除）时非常有用</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(Map.Entry&lt;String, String&gt; entry : map.entrySet())&#123;</span><br><span class="line">            <span class="keyword">if</span> (entry.getKey().equals(<span class="string">&quot;key1&quot;</span>))&#123;</span><br><span class="line">                entry.setValue(<span class="string">&quot;ddd&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> java基础 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
