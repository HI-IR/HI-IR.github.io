<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>DrawerLayout-NavigationView实现滑动菜单</title>
      <link href="/2025/01/19/DrawerLayout-NavigationView%E5%AE%9E%E7%8E%B0%E6%BB%91%E5%8A%A8%E8%8F%9C%E5%8D%95/"/>
      <url>/2025/01/19/DrawerLayout-NavigationView%E5%AE%9E%E7%8E%B0%E6%BB%91%E5%8A%A8%E8%8F%9C%E5%8D%95/</url>
      
        <content type="html"><![CDATA[<h1 id="DrawerLayout-NavigationView实现滑动菜单"><a href="#DrawerLayout-NavigationView实现滑动菜单" class="headerlink" title="DrawerLayout-NavigationView实现滑动菜单"></a>DrawerLayout-NavigationView实现滑动菜单</h1><h2 id="DrawerLayout"><a href="#DrawerLayout" class="headerlink" title="DrawerLayout"></a>DrawerLayout</h2><h3 id="DrawerLayout介绍"><a href="#DrawerLayout介绍" class="headerlink" title="DrawerLayout介绍"></a>DrawerLayout介绍</h3><p> DrawerLayout 提供了一种简单而直观的方式来让用户访问应用的不同部分或功能模块</p><blockquote><p><code>DrawerLayout</code> 是 Android 中用于实现侧边导航栏的一个重要组件。</p></blockquote><h3 id="DrawerLayout的实现"><a href="#DrawerLayout的实现" class="headerlink" title="DrawerLayout的实现"></a>DrawerLayout的实现</h3><h4 id="XML布局"><a href="#XML布局" class="headerlink" title="XML布局"></a>XML布局</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">androidx.drawerlayout.widget.DrawerLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:id</span>=<span class="string">&quot;@+id/drawer_layout&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 主屏幕显示内容--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">androidx.constraintlayout.widget.ConstraintLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">&quot;@+id/textView&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_marginEnd</span>=<span class="string">&quot;140dp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">&quot;这是主屏幕&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:textSize</span>=<span class="string">&quot;20sp&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:layout_constraintBottom_toBottomOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:layout_constraintEnd_toEndOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:layout_constraintTop_toTopOf</span>=<span class="string">&quot;parent&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">&quot;@+id/button&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">&quot;打开左侧菜单&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:layout_constraintStart_toStartOf</span>=<span class="string">&quot;parent&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">app:layout_constraintTop_toTopOf</span>=<span class="string">&quot;parent&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">androidx.constraintlayout.widget.ConstraintLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 侧滑显示内容 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;260dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_gravity</span>=<span class="string">&quot;left&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:background</span>=<span class="string">&quot;#BCEE68&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:gravity</span>=<span class="string">&quot;center_horizontal&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">&quot;这是侧滑显示&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:textSize</span>=<span class="string">&quot;25sp&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">androidx.drawerlayout.widget.DrawerLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：</p><p>主视图的 <code>layout_height</code> 必须是 <code>match_parent</code>，否则报错。</p><p>侧滑菜单关键属性<code>android:layout_gravity</code>，这个是必须要指定的。(left即为左侧侧滑菜单，right即为右侧侧滑菜单)</p></blockquote><p> 这里只是一个简单的实现，你可以把 <code>TextView</code> 改为 <code>NavigationView 或自定义布局</code>。</p><h4 id="DrawerLayout的交互"><a href="#DrawerLayout的交互" class="headerlink" title="DrawerLayout的交互"></a>DrawerLayout的交互</h4><h5 id="打开侧边栏"><a href="#打开侧边栏" class="headerlink" title="打开侧边栏"></a>打开侧边栏</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drawerLayout.openDrawer()</span><br></pre></td></tr></table></figure><p>通过按钮或手势调用 <code>drawerLayout.openDrawer()</code> 方法，将滑动菜单显示出来，注意 <code>openDrawer</code> 方法需要传入一个<code>Gravity</code>参数。需要和XML文件设置的 <code>layout_gravity</code> 方向保持统一，否则会报错</p><h5 id="关闭侧边栏"><a href="#关闭侧边栏" class="headerlink" title="关闭侧边栏"></a>关闭侧边栏</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drawerLayout.closeDrawer();</span><br></pre></td></tr></table></figure><p>通过按钮或手势调用 <code>drawerLayout.closeDrawer()</code> 方法，将滑动菜单显示出来，注意 <code>closeDrawer</code> 方法需要传入一个<code>Gravity</code>参数。需要和XML文件设置的 <code>layout_gravity</code> 方向保持统一，否则会报错</p><h5 id="侧边栏的监听"><a href="#侧边栏的监听" class="headerlink" title="侧边栏的监听"></a>侧边栏的监听</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drawerLayout.addDrawerListener();</span><br></pre></td></tr></table></figure><p>通过<code>addDrawerListener</code>方法监听侧边栏</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">drawerLayout.addDrawerListener(<span class="keyword">new</span> <span class="title class_">DrawerLayout</span>.DrawerListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onDrawerSlide</span><span class="params">(<span class="meta">@NonNull</span> View drawerView, <span class="type">float</span> slideOffset)</span> &#123;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onDrawerOpened</span><span class="params">(<span class="meta">@NonNull</span> View drawerView)</span> &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onDrawerClosed</span><span class="params">(<span class="meta">@NonNull</span> View drawerView)</span> &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onDrawerStateChanged</span><span class="params">(<span class="type">int</span> newState)</span> &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><h2 id="NavigationView"><a href="#NavigationView" class="headerlink" title="NavigationView"></a>NavigationView</h2><h3 id="NavigationView介绍"><a href="#NavigationView介绍" class="headerlink" title="NavigationView介绍"></a>NavigationView介绍</h3><p>根据上面内容已经成功实现了侧滑菜单的功能，但是侧滑菜单的UI比较单一。但真正的侧滑菜单可不会这么简单,如何丰富我们的侧滑菜单呢？</p><p>有2种解决途径</p><blockquote><ul><li>1.在侧滑菜单中自定义布局</li><li>2.Google 提供的 NavigationView(推荐使用)。</li></ul></blockquote><p>这个菜单整体上分为两部分，上面一部分叫做<code>HeaderLayout</code>，下面的那些点击项都是<code>menu</code></p><h3 id="NavigationView属性"><a href="#NavigationView属性" class="headerlink" title="NavigationView属性"></a>NavigationView属性</h3><ul><li><p><code>app:headerLayout=&quot;@layout/header_layout</code>:引用一个头布局文件，这个头就是我们在上面看到的那个背景图片，包括背景图片上面的显示用户名的控件等等</p></li><li><p><code>app:menu=&quot;@menu/menu&quot;</code>表示引用一个menu作为下面的点击项</p></li><li><p><code>app:itemIconTint=&quot;@color/blue&quot;</code>可以设置menu中item的icon颜色</p></li></ul><blockquote><p>如果要使用icon原本的颜色，可以使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">NavigationView</span> <span class="variable">navigationView</span> <span class="operator">=</span>findViewById(R.id.navigation_view);</span><br><span class="line">navigationView.setItemIconTintList(<span class="literal">null</span>);</span><br></pre></td></tr></table></figure></blockquote><ul><li><p><code>app:itemBackground=&quot;@color/colorAccent&quot;</code>设置每一个item的背景颜色</p><p><code>app:itemTextColor=&quot;&quot;</code>设置item的背景颜色</p></li><li><p>如果我想在NavigationView的item之间添加上一条分隔线呢？</p><p>只需要在<code>menu</code>中将相应的<code>item</code>放到一个<code>group</code>中，并给该group取一个id即可</p></li></ul><h3 id="NavigationView的事件监听"><a href="#NavigationView的事件监听" class="headerlink" title="NavigationView的事件监听"></a>NavigationView的事件监听</h3><h4 id="头部点击事件"><a href="#头部点击事件" class="headerlink" title="头部点击事件"></a>头部点击事件</h4><p>处理头部点击事件，我们需要先获得到头部控件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取头布局文件</span></span><br><span class="line"><span class="type">View</span> <span class="variable">headerView</span> <span class="operator">=</span> navigationView.getHeaderView(<span class="number">0</span>);</span><br></pre></td></tr></table></figure><p>然后通过调用headerView中的findViewById方法来查找到头部的控件，设置点击事件即可。</p><h4 id="item点击事件"><a href="#item点击事件" class="headerlink" title="item点击事件"></a>item点击事件</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">navigationView.setNavigationItemSelectedListener(<span class="keyword">new</span> <span class="title class_">NavigationView</span>.OnNavigationItemSelectedListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">onNavigationItemSelected</span><span class="params">(<span class="meta">@NonNull</span> MenuItem menuItem)</span> &#123;</span><br><span class="line">                <span class="keyword">switch</span> (menuItem.getItemId()) &#123;</span><br><span class="line">                    <span class="keyword">case</span> R.id.title1:</span><br><span class="line">                        Toast.makeText(Main2Activity.<span class="built_in">this</span>, <span class="string">&quot;第一个&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 寒假考核系列 </tag>
            
            <tag> 安卓学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>寒假考核Day1</title>
      <link href="/2025/01/18/%E5%AF%92%E5%81%87%E8%80%83%E6%A0%B8Day1/"/>
      <url>/2025/01/18/%E5%AF%92%E5%81%87%E8%80%83%E6%A0%B8Day1/</url>
      
        <content type="html"><![CDATA[<h1 id="寒假考核Day1"><a href="#寒假考核Day1" class="headerlink" title="寒假考核Day1"></a>寒假考核Day1</h1><p>今日完成：</p><ul><li><input checked="" disabled="" type="checkbox"> 学习MVP架构</li><li><input checked="" disabled="" type="checkbox"> 进行MVP架构的小练习</li><li><input checked="" disabled="" type="checkbox"> 完成了基础的软件规划</li><li><input checked="" disabled="" type="checkbox"> 完成了基础的登录功能</li><li><input checked="" disabled="" type="checkbox"> 完成了NetUtils工具类的编写</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 寒假考核系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MVP架构</title>
      <link href="/2025/01/18/MVP%E6%9E%B6%E6%9E%84/"/>
      <url>/2025/01/18/MVP%E6%9E%B6%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h1 id="MVP架构"><a href="#MVP架构" class="headerlink" title="MVP架构"></a>MVP架构</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>三个核心组件组成：Model（模型）、View（视图）和 Presenter（展示器）</p><p>把原来的UI逻辑抽象成View接口，把原来的业务逻辑抽象成Presenter接口，model还是原来的modle</p><blockquote><p><strong>Model（模型）</strong>：</p><ul><li>**定义:**负责处理应用程序的数据逻辑，包括与数据库、网络、API等数据源的交互</li><li>**职责:**提供数据，并将其返回给 Presenter，不涉及任何UI相关逻辑</li></ul><p><strong>View（视图）</strong>：</p><ul><li><p>**定义:**负责展示用户界面，接收用户的输入并将其传递给 Presenter</p></li><li><p>**职责:**展示由 Presenter 提供的数据，并根据用户操作调用 Presenter 的方法。View 层不直接处理逻辑，只展示内容</p></li></ul><p><strong>Presenter（演示者）</strong>：</p><ul><li><p>**定义：**作为 View 和 Model 之间的桥梁，负责处理逻辑和协调数据流</p></li><li><p><strong>职责：</strong></p><ol><li>从 View 接收用户输入，调用 Model 获取数据</li><li>将数据处理结果返回给 View 以更新UI</li><li>Presenter 不直接操作UI，而是通过接口与 View 进行交互</li></ol></li></ul></blockquote><h2 id="交互流程"><a href="#交互流程" class="headerlink" title="交互流程"></a>交互流程</h2><p>用户操作触发——&gt;Presenter 处理——&gt;Model 数据处理——&gt;Presenter 更新 View</p><h2 id="案例：简单登录页"><a href="#案例：简单登录页" class="headerlink" title="案例：简单登录页"></a>案例：简单登录页</h2><ul><li><h3 id="定义接口"><a href="#定义接口" class="headerlink" title="定义接口"></a>定义接口</h3></li></ul><p>为了保证Presenter与View和Model解耦，我们需要为View和Model定义接口</p><p><strong>ILoginView:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ILoginView</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">showLoging</span><span class="params">()</span>;<span class="comment">//加载条</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">hideLoading</span><span class="params">()</span>;<span class="comment">//隐藏加载条</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">showLoginInf</span><span class="params">(String msg)</span>;<span class="comment">//显示登录信息</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>ILoginModel:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ILoginModel</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">login</span><span class="params">(String usename,String password,Callback callback)</span>;<span class="comment">//数据判断逻辑</span></span><br><span class="line">    <span class="keyword">interface</span> <span class="title class_">Callback</span> &#123;</span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">onSuccess</span><span class="params">(String msg)</span>;</span><br><span class="line">        <span class="keyword">void</span> <span class="title function_">onError</span><span class="params">(String msg)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><h3 id="实现Model和Presenter"><a href="#实现Model和Presenter" class="headerlink" title="实现Model和Presenter"></a>实现Model和Presenter</h3></li></ul><p><strong>LoginModel</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginModel</span> <span class="keyword">implements</span> <span class="title class_">ILoginModel</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">login</span><span class="params">(String usename, String password, Callback callback)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (usename.equals(<span class="string">&quot;admin&quot;</span>) &amp;&amp; password.equals(<span class="string">&quot;1234&quot;</span>))&#123;</span><br><span class="line">            callback.onSuccess(<span class="string">&quot;登录成功&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            callback.onError(<span class="string">&quot;密码错误&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>LoginPresenter</strong></p><blockquote><p>Presenter像一个人一样，左手牵View层，右手牵Model层</p></blockquote><ol><li>构建View层与Presenter和Model层和Presenter层的联系</li></ol><p><em>如图：</em> <img src="/../image/MVP%E6%9E%B6%E6%9E%84/1.jpg" alt="1"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginPresenter</span>&lt;T <span class="keyword">extends</span> <span class="title class_">ILoginView</span>&gt; &#123;</span><br><span class="line">    <span class="comment">//-------------构建View层与Presenter和Model层和Presenter层的联系---------------</span></span><br><span class="line">    ILoginView mLoginView;</span><br><span class="line">    <span class="type">ILoginModel</span> <span class="variable">mLoginModel</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LoginModel</span>();</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LoginPresenter</span><span class="params">(T View)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.mLoginView = View;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//---------------------------------业务逻辑-----------------------------------</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">login</span><span class="params">(String username, String password)</span>&#123;</span><br><span class="line">        mLoginView.showLoging();</span><br><span class="line">        mLoginModel.login(username, password, <span class="keyword">new</span> <span class="title class_">ILoginModel</span>.Callback() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onSuccess</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">                mLoginView.hideLoading();</span><br><span class="line">                mLoginView.showLoginInf(msg);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onError</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">                mLoginView.hideLoading();</span><br><span class="line">                mLoginView.showLoginInf(msg);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><h3 id="View层实现"><a href="#View层实现" class="headerlink" title="View层实现"></a>View层实现</h3></li></ul><p>最后，我们在View层中实现ILoginView接口，并将操作委托给Presenter层</p><p><strong>LoginActivity：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginActivity</span> <span class="keyword">extends</span> <span class="title class_">AppCompatActivity</span> <span class="keyword">implements</span> <span class="title class_">ILoginView</span> &#123;</span><br><span class="line">    EditText mEtUserName;</span><br><span class="line">    EditText mEtPassWord;</span><br><span class="line">    Button mBtnLogin;</span><br><span class="line">    ProgressBar mProgressBar;</span><br><span class="line">    LoginPresenter mLoginPresenter;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onCreate</span><span class="params">(Bundle savedInstanceState)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_login);</span><br><span class="line">        initview();</span><br><span class="line">        initEvent();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">initview</span><span class="params">()</span> &#123;</span><br><span class="line">        mEtPassWord=findViewById(R.id.password);</span><br><span class="line">        mEtUserName=findViewById(R.id.username);</span><br><span class="line">        mBtnLogin=findViewById(R.id.loginButton);</span><br><span class="line">        mProgressBar=findViewById(R.id.progressBar);</span><br><span class="line">        mLoginPresenter=<span class="keyword">new</span> <span class="title class_">LoginPresenter</span>(<span class="built_in">this</span>);<span class="comment">//创建Presenter层</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">initEvent</span><span class="params">()</span> &#123;</span><br><span class="line">        mBtnLogin.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span> &#123;</span><br><span class="line">                showLoging();</span><br><span class="line">               mLoginPresenter.login(mEtUserName.getText().toString(),mEtPassWord.getText().toString());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">showLoging</span><span class="params">()</span> &#123;</span><br><span class="line">        mProgressBar.setVisibility(View.VISIBLE);</span><br><span class="line">        Toast.makeText(<span class="built_in">this</span>,<span class="string">&quot;登录中&quot;</span>,Toast.LENGTH_SHORT).show();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hideLoading</span><span class="params">()</span> &#123;</span><br><span class="line">        mProgressBar.setVisibility(View.GONE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">showLoginInf</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">        Toast.makeText(<span class="built_in">this</span>,msg,Toast.LENGTH_SHORT).show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>activity_login.xml：</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:gravity</span>=<span class="string">&quot;center&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:padding</span>=<span class="string">&quot;16dp&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 用户名输入框 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">EditText</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/username&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:hint</span>=<span class="string">&quot;Username&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:inputType</span>=<span class="string">&quot;text&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:padding</span>=<span class="string">&quot;12dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginBottom</span>=<span class="string">&quot;16dp&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 密码输入框 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">EditText</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/password&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:hint</span>=<span class="string">&quot;Password&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:inputType</span>=<span class="string">&quot;textPassword&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:padding</span>=<span class="string">&quot;12dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginBottom</span>=<span class="string">&quot;16dp&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 登录按钮 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/loginButton&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">&quot;Login&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:padding</span>=<span class="string">&quot;12dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginBottom</span>=<span class="string">&quot;16dp&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 加载进度条 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ProgressBar</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/progressBar&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:visibility</span>=<span class="string">&quot;gone&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3></li></ul><p>​<img src="/../image/MVP%E6%9E%B6%E6%9E%84/2.jpg" alt="2"></p><p><strong>代码逻辑</strong></p><ol><li>用户在 <code>LoginActivity</code> 中输入用户名和密码，并点击登录按钮。</li><li><code>LoginActivity</code> 通过 <code>LoginPresenter</code> 调用 <code>login</code> 方法，传递用户名和密码。</li><li><code>LoginPresenter</code> 调用 <code>LoginView</code> 的 <code>showLoading</code> 方法显示加载状态。</li><li><code>LoginPresenter</code> 调用 <code>LoginModel</code> 的 <code>login</code> 方法，并传递用户名、密码和 <code>LoginCallback</code> 实例。</li><li><code>LoginModelImpl</code> 进行登录验证，如果成功，调用 <code>LoginCallback</code> 的 <code>onSuccess</code> 方法；如果失败，调用 <code>onError</code> 方法。</li><li><code>LoginPresenter</code> 收到回调结果，调用 <code>LoginView</code> 的 <code>hideLoading</code> 方法隐藏加载状态，并根据结果调用 <code>LoginView</code> 的 <code>showLoginInf</code> 方法</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> java基础 </tag>
            
            <tag> 寒假考核系列 </tag>
            
            <tag> 安卓学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL指令</title>
      <link href="/2025/01/17/SQL%E6%8C%87%E4%BB%A4/"/>
      <url>/2025/01/17/SQL%E6%8C%87%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="SQL指令"><a href="#SQL指令" class="headerlink" title="SQL指令"></a>SQL指令</h1><blockquote><p>可以使用SQL命令进行关系型数据库操作</p></blockquote><blockquote><p><strong>注:</strong> 不同的关系型管理系统可能有不同的指令</p></blockquote><p><strong>持续更新(学到哪更到哪)</strong></p><h2 id="SQL概述"><a href="#SQL概述" class="headerlink" title="SQL概述"></a>SQL概述</h2><blockquote><p>SQL指令主要分为：数据定义，数据操纵，数据查询，数据控制，事务控制等</p></blockquote><h3 id="数据定义-DDL"><a href="#数据定义-DDL" class="headerlink" title="数据定义(DDL)"></a>数据定义(DDL)</h3><p>​创建和修改盛放数据的容器</p><h3 id="数据操纵-DML"><a href="#数据操纵-DML" class="headerlink" title="数据操纵(DML)"></a>数据操纵(DML)</h3><p>​表中添加，修改，删除数据</p><h3 id="数据查询-DQL"><a href="#数据查询-DQL" class="headerlink" title="数据查询(DQL)"></a>数据查询(DQL)</h3><p>​表中数据多条件查询（最复杂的！！！）</p><h3 id="事务控制-TCL-与-数据控制-DCL"><a href="#事务控制-TCL-与-数据控制-DCL" class="headerlink" title="事务控制(TCL) 与 数据控制(DCL)"></a>事务控制(TCL) 与 数据控制(DCL)</h3><p>​事务启动，提交，回滚(事务控制)</p><p>​账号创建，权限控制(数据控制)</p><p><strong>注：</strong> 数据定义，数据操纵，数据查询是重点</p><blockquote><p><strong>学习路线</strong> DDL - DML - DQL  - TCL - DCL</p></blockquote><h3 id="一条数据的存储过程"><a href="#一条数据的存储过程" class="headerlink" title="一条数据的存储过程"></a>一条数据的存储过程</h3><p>创建库 -&gt; 定字段 -&gt; 创建表 -&gt; 插数据</p><h2 id="基础操作"><a href="#基础操作" class="headerlink" title="基础操作"></a>基础操作</h2><h3 id="连接mysql服务"><a href="#连接mysql服务" class="headerlink" title="连接mysql服务"></a>连接mysql服务</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u&lt;username&gt; -p&lt;password&gt; -h&lt;hostname&gt; -P&lt;port&gt; &lt;databassname&gt;</span><br></pre></td></tr></table></figure><blockquote><p>-u<username>：用户名 </p><p>-p<password>：密码（-p后面不带空格 例：-ppassword）</p><p>-h<hostname>：用于指定MySQL服务器的IP（可以不写该参数，默认本地）</p><p>-P<port>：用于指定链接MySQL服务器的端口号（可不写，默认3306）</p><p><databassname>：是你要连接的数据库的名字，连接后会默认使用这个数据库</p></blockquote><p><strong>也可以在-p后不输入密码，进入隐私模式输入密码</strong></p><h3 id="其他基础SQL命令"><a href="#其他基础SQL命令" class="headerlink" title="其他基础SQL命令"></a>其他基础SQL命令</h3><blockquote><p>命令之间用  ;  隔开</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-- 查看版本</span><br><span class="line"><span class="keyword">select</span> version();</span><br><span class="line"></span><br><span class="line">-- 退出连接</span><br><span class="line"><span class="built_in">exit</span>;</span><br></pre></td></tr></table></figure><h2 id="SQL命名规定和规范"><a href="#SQL命名规定和规范" class="headerlink" title="SQL命名规定和规范"></a>SQL命名规定和规范</h2><h3 id="SQL命名规定"><a href="#SQL命名规定" class="headerlink" title="SQL命名规定"></a>SQL命名规定</h3><ol><li>数据库名，表名不得超过30个字符，变量名限制为29个</li><li>必须只能包含A<del>Z，a</del>z，0~9，_ ，且<strong>不能以数字</strong>开头</li><li>数据库名，表，字段等对象名中<strong>不能</strong>包含空格</li><li>同一个MySQL软件中，数据库不能同名；同一个库中，表不能重名；同一个表中，字段不能重名</li><li>字段没有和保留字，数据库关键字重名。如果非要用，请在SQL语句中使用 “ &#96; ” 标识</li></ol><h3 id="SQL命名规范"><a href="#SQL命名规范" class="headerlink" title="SQL命名规范"></a>SQL命名规范</h3><ol><li>库，表，列名应该使用小写字母，并使用**下划线(_)**或者使用驼峰命名法</li><li>库名应于对应的程序名一致。例如：程序名为 EcommercePlatform 数据库名命名为 ecommerce_platform</li><li>表命名最好是遵循 **”业务名称_表的作用”**的方式 例如：trade_config</li><li>列名应该遵循 **”表实体_属性“**的方式 例如：product_name 或者 productName</li></ol><h2 id="数据定义DDL"><a href="#数据定义DDL" class="headerlink" title="数据定义DDL"></a>数据定义DDL</h2><blockquote><p>定义和管理数据库的结构，完成<strong>库</strong> ，<strong>表</strong>，索引，视图等数据库对象的创建，修改和删除。</p><p>DDL不涉及对数据的操作，而是关注数据库的结构和元数据（容器）。</p></blockquote><h3 id="DDL关键字"><a href="#DDL关键字" class="headerlink" title="DDL关键字"></a>DDL关键字</h3><p><strong>CREATE</strong> :用于创建数据库，表，索引，视图</p><p><strong>ALTER</strong>:用于修改数据库对象的结构，如修改表结构，添加列，和删除列等</p><p><strong>DROP</strong>:用于删除数据库对象，如删除表，删除索引等</p><h3 id="库管理"><a href="#库管理" class="headerlink" title="库管理"></a>库管理</h3><h4 id="创建库"><a href="#创建库" class="headerlink" title="创建库"></a>创建库</h4><p>创建库，必须指定<strong>库名</strong>，可能指定<strong>字符集</strong>或者<strong>排序方式</strong></p><ul><li>方式1：创建数据库，使用默认的字符集和排序方式</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE DATABASE 数据库名;</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：如果存在该数据库则会报错</p><ul><li>方式2：判断并创建默认字符集数据库（推荐）</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE DATABAsE IF NOT EXISTS 数据库名;</span><br></pre></td></tr></table></figure><ul><li>方式3：创建指定字符集和排序规则库</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE DATABASE 数据库名 CHARACTER SET 字符集 COLLATE 排序规则;</span><br></pre></td></tr></table></figure><blockquote><p>字符集：即编码格式，如果不采用正确的字符集则可能出现乱码的情况</p><p>(字符集Character Set：utf8<strong>utf8mb4</strong>)</p><p>排序规则：如何比较和排序存储在数据库中的文本数据</p><p>(排序规则Collate：utf8mb4_0900_ai_ci:不区分大小写；utf8mb4_0900_as_cs:区分大小写)</p></blockquote><h4 id="查看和使用库"><a href="#查看和使用库" class="headerlink" title="查看和使用库"></a>查看和使用库</h4><ul><li>查看当前所有库</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SHOW DATABASES;</span><br><span class="line"># 注意有S</span><br></pre></td></tr></table></figure><ul><li>查看当前使用的库</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT DATABASE();</span><br></pre></td></tr></table></figure><ul><li>查看创建库的信息</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHOW CREATE DATABASE 数据库名;</span><br></pre></td></tr></table></figure><ul><li>查看指定库下所有表</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SHOW TABLES FROM 数据库名;</span><br><span class="line"># 注意table有S</span><br></pre></td></tr></table></figure><ul><li>切换库和选中库</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">USE 数据库名;</span><br></pre></td></tr></table></figure><hr><p><strong>注意:</strong></p><ol><li>当查看所有表，所有库的时候会加S，如DATABASES，TABLES</li><li>要操控表格和数据之前必须先说明是对哪个数据库进行操作，先use库</li></ol><hr><h4 id="修改库"><a href="#修改库" class="headerlink" title="修改库"></a>修改库</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER DATABASE 数据库名 CHARACTER SET 字符集 COLLATE 排序方式</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：修改库只能修改库的字符集和排序方式，不能修改数据库名字。</p><p><em>一些可视化工具可以给库改名：它是建新库，把所有表复制到新库，再把就库删除</em></p><h4 id="删除库"><a href="#删除库" class="headerlink" title="删除库"></a>删除库</h4><blockquote><p>删除数据库前要三思，确认好再删除，否则真要 提桶跑路.jpg</p></blockquote><ul><li>直接删库</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DROP DATABASE 数据库名;</span><br><span class="line"># 如果库名不存在则报错</span><br></pre></td></tr></table></figure><ul><li>判读并删除库</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DROP DATABASE IF EXISTS 数据库名;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> MySQL学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java基础之集合</title>
      <link href="/2025/01/08/java%E5%9F%BA%E7%A1%80%E4%B9%8B%E9%9B%86%E5%90%88/"/>
      <url>/2025/01/08/java%E5%9F%BA%E7%A1%80%E4%B9%8B%E9%9B%86%E5%90%88/</url>
      
        <content type="html"><![CDATA[<h1 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h1><h2 id="为什么使用泛型"><a href="#为什么使用泛型" class="headerlink" title="为什么使用泛型"></a>为什么使用泛型</h2><blockquote><p>泛型是一种推广化和限制化</p><p>泛型是一种<strong>推广化</strong>。它允许代码在更广泛的类型上工作，而不是局限于特定的类型</p><p>泛型是一种<strong>限制化</strong>。通过指定泛型类型，限制了在该类型参数位置可以使用的类型</p></blockquote><h2 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h2><h3 id="泛型类的定义"><a href="#泛型类的定义" class="headerlink" title="泛型类的定义"></a>泛型类的定义</h3><blockquote><p>类型参数用于类的定义中，则该类被称为泛型类。</p><p>最典型的就是各种容器类，如：List、Set、Map等。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">class 类名&lt;泛型标识&gt;&#123;</span><br><span class="line"><span class="keyword">private</span> 泛型标识 <span class="comment">/*（成员变量类型）*/</span> 变量名; </span><br><span class="line">  .....</span><br><span class="line">  &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>常见的泛型标识如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">T ：代表一般的任何类。</span><br><span class="line">E ：代表 Element 元素的意思，或者 Exception 异常的意思。</span><br><span class="line">K ：代表 Key 的意思。</span><br><span class="line">V ：代表 Value 的意思，通常与 K 一起配合使用。</span><br></pre></td></tr></table></figure></blockquote><p>**注意：**泛型是没有多态的</p><h1 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><h3 id="Java集合分为2种体系"><a href="#Java集合分为2种体系" class="headerlink" title="Java集合分为2种体系"></a>Java集合分为2种体系</h3><ol><li>单一数据体系: Collection接口</li><li>成对出现的数据体系     键值对数据（key , value） Map接口</li></ol><h2 id="Collection"><a href="#Collection" class="headerlink" title="Collection"></a>Collection</h2><h3 id="List"><a href="#List" class="headerlink" title="List"></a>List</h3><p>​按照插入顺序保存数据，数据可以重复</p><p>​具体实现类：ArrayListLinkedList</p><h4 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h4><h5 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ArrayList</span> <span class="variable">list</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br></pre></td></tr></table></figure><ol><li>参数构造，底层数组为空数组</li><li>构造函数传递一个int类型的数据，用于设定底层数组的长度</li><li>构造函数传递一个Collection集合类型的值，用于将其他集合中的数据放置在当前集合中</li></ol><h5 id="增"><a href="#增" class="headerlink" title="增"></a>增</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="title function_">add</span><span class="params">(Object element)</span>;</span><br><span class="line"><span class="comment">//在集合最后面加入元素</span></span><br><span class="line"></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> index,Object element)</span></span><br><span class="line"><span class="comment">//在指定位置插入元素</span></span><br></pre></td></tr></table></figure><p>*注意扩容</p><h5 id="删"><a href="#删" class="headerlink" title="删"></a>删</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Object</span> <span class="variable">removeVal</span> <span class="operator">=</span> list.remove(<span class="type">int</span> index);</span><br><span class="line"><span class="comment">//该方法返回结果，这个结果是删除的值</span></span><br></pre></td></tr></table></figure><h5 id="改"><a href="#改" class="headerlink" title="改"></a>改</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Object</span> <span class="variable">oldVal</span> <span class="operator">=</span>list.set(<span class="type">int</span> index,Object element);</span><br><span class="line"><span class="comment">//该方法返回结果，这个结果是更新前的值</span></span><br></pre></td></tr></table></figure><h5 id="查"><a href="#查" class="headerlink" title="查"></a>查</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//访问数组长度</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">size</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取指定位置的数据</span></span><br><span class="line">E <span class="title function_">get</span><span class="params">(<span class="type">int</span> index)</span>;</span><br></pre></td></tr></table></figure><h5 id="其他常用方法"><a href="#其他常用方法" class="headerlink" title="其他常用方法"></a>其他常用方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">//集合中的数据是否为空</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">clear</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">//清空集合中的数据</span></span><br><span class="line"></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">removeAll</span><span class="params">(Collection&lt;?&gt;c)</span>;</span><br><span class="line"><span class="comment">//删除指定集合的数据</span></span><br><span class="line"></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">contains</span><span class="params">(Object element)</span>;</span><br><span class="line"><span class="comment">//集合中是否存在元素element</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">indexof</span><span class="params">(Object element)</span>;</span><br><span class="line"><span class="comment">//用于获取数据在集合中第一个索引位置</span></span><br><span class="line"><span class="comment">//如果数据不存在，则返回-1</span></span><br><span class="line"><span class="comment">//如果有2个同样的element，则返回第一个索引</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Object[] toArray();</span><br><span class="line"><span class="comment">//把ArrayList变成Array数组</span></span><br><span class="line"></span><br><span class="line">Object <span class="title function_">clone</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">//克隆ArrayList</span></span><br></pre></td></tr></table></figure><h4 id="LinkedList-双向链表"><a href="#LinkedList-双向链表" class="headerlink" title="LinkedList(双向链表)"></a>LinkedList(双向链表)</h4><h5 id="构造方法-1"><a href="#构造方法-1" class="headerlink" title="构造方法"></a>构造方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">LinkedList&lt;E&gt; list = <span class="keyword">new</span> <span class="title class_">LinkedList</span>();</span><br><span class="line"><span class="comment">//无参构造</span></span><br><span class="line"><span class="comment">//有参构造 传入一个Collection数据</span></span><br></pre></td></tr></table></figure><h5 id="增-1"><a href="#增-1" class="headerlink" title="增"></a>增</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="title function_">add</span><span class="params">(Object element)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> index,Object element)</span>;</span><br><span class="line"><span class="comment">//插入法</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">addFirst</span><span class="params">(Object element)</span>;</span><br></pre></td></tr></table></figure><h5 id="获取数据"><a href="#获取数据" class="headerlink" title="获取数据"></a>获取数据</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">E <span class="title function_">getFirst</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">//获取头指针指向的元素</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">E <span class="title function_">getLast</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">//获取尾指针指向的元素</span></span><br><span class="line"></span><br><span class="line">E <span class="title function_">get</span><span class="params">(<span class="type">int</span> index)</span></span><br></pre></td></tr></table></figure><h5 id="改-1"><a href="#改-1" class="headerlink" title="改"></a>改</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">E <span class="title function_">set</span><span class="params">(<span class="type">int</span> index,Object element)</span>;</span><br></pre></td></tr></table></figure><h5 id="删-1"><a href="#删-1" class="headerlink" title="删"></a>删</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="title function_">remove</span><span class="params">(<span class="type">int</span> index)</span>;</span><br><span class="line"></span><br><span class="line">E <span class="title function_">removeFirst</span><span class="params">()</span>;</span><br><span class="line">E <span class="title function_">remove</span><span class="params">()</span>;<span class="comment">//删除第一个</span></span><br><span class="line"></span><br><span class="line">E <span class="title function_">removeLast</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">remove</span><span class="params">(Object element)</span></span><br></pre></td></tr></table></figure><h5 id="其他常用方法-1"><a href="#其他常用方法-1" class="headerlink" title="其他常用方法"></a>其他常用方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">push</span><span class="params">(Object element)</span>;</span><br><span class="line"><span class="comment">//等同于 list.addFirst()</span></span><br><span class="line"></span><br><span class="line">E <span class="title function_">pop</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">//弹出数据</span></span><br></pre></td></tr></table></figure><h4 id="排序（sort）"><a href="#排序（sort）" class="headerlink" title="排序（sort）"></a>排序（sort）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NumberComparator</span> <span class="keyword">implements</span> <span class="title class_">Comparator</span>&lt;Integer&gt; &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line">    </span><br><span class="line">   </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Integer o1,Integer o2)</span>&#123;</span><br><span class="line">        <span class="comment">//如果第一个数比第二个数大，则返回结果为正数，标识升序</span></span><br><span class="line">        <span class="comment">//如果第一个数比第二个数小，则返回结果为负数，标识降序</span></span><br><span class="line">        <span class="comment">//如果第一个数比第二个数相等，则返回结果0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">list.sort();</span><br><span class="line"><span class="comment">//需要传入一个实现了比较器Comparator接口的对象</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="Comparator比较器中compare的规则"><a href="#Comparator比较器中compare的规则" class="headerlink" title="Comparator比较器中compare的规则"></a>Comparator比较器中compare的规则</h5><p>**规则:**返回结果为正时，交换顺序，返回值为负时不交换顺序</p><h3 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h3><p>​集，无顺保存，数据不能重复</p><p>​具体实现类：HashSet</p><h4 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h4><p>放入的数据会通过Hash算法得到不同的index，我们并不能知道一个element对应的经过Hash算法后的index，所以对于我们而言是无序的，相同的element经过Hash得到的index是一样的，HashSet所以数据是不能重复的</p><p>添加一个数据时，先经过Hash算法获得index,按照index放入相对应的数组位置中，如果2个不相同的元素，经过该算法获得了相同的index那么HashSet将会运行equal来判断2个元素是否相等，相等则不改变set，不相等时会采用链表的方法将2值连在一起</p><p><strong>HashSet的底层为 数组+链表的形式</strong></p><blockquote><p><strong>对象重复的判断标准：</strong></p><p>对象HashCode相不相同（内存地址）</p><p>HashCode不相同，则不重复</p><p>HashCode相同，则重复</p></blockquote><blockquote><p><strong>注:</strong></p><p>HashCode的算法可以自己修改，以达到判断是否相同的目的</p></blockquote><h5 id="更改判断标准"><a href="#更改判断标准" class="headerlink" title="更改判断标准"></a>更改判断标准</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">User</span>&#123;</span><br><span class="line">    <span class="type">int</span> id;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(<span class="type">int</span> id, String name)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object o)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span> == o) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (!(o <span class="keyword">instanceof</span> User user)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> id == user.id &amp;&amp; name.equals(user.name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="构造方法-2"><a href="#构造方法-2" class="headerlink" title="构造方法"></a>构造方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HashSet&lt;E&gt; set =<span class="keyword">new</span> <span class="title class_">HashSet</span>();</span><br></pre></td></tr></table></figure><h5 id="增-2"><a href="#增-2" class="headerlink" title="增"></a>增</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">set.add(Object element);</span><br><span class="line"><span class="comment">//添加单个元素</span></span><br><span class="line"></span><br><span class="line">set.addAll(Collection c);</span><br><span class="line"><span class="comment">//添加一个集合的元素</span></span><br></pre></td></tr></table></figure><h5 id="删-2"><a href="#删-2" class="headerlink" title="删"></a>删</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set.remove(E element);</span><br></pre></td></tr></table></figure><h5 id="改-2"><a href="#改-2" class="headerlink" title="改"></a>改</h5><p>**注:**HashSet中没有改的操作</p><h5 id="查-1"><a href="#查-1" class="headerlink" title="查"></a>查</h5><p>**注:**HashSet中没有查的操作</p><h5 id="其他常用方法-2"><a href="#其他常用方法-2" class="headerlink" title="其他常用方法"></a>其他常用方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Object[] set.toArray();</span><br><span class="line"><span class="comment">//将set转化为数组</span></span><br><span class="line"></span><br><span class="line">set.clear();</span><br><span class="line">set.isEmpty();</span><br><span class="line"> </span><br><span class="line"><span class="type">boolean</span> set.contains(Object element);</span><br><span class="line"><span class="type">boolean</span> set.containsAll(Collection c);</span><br></pre></td></tr></table></figure><h3 id="Queue"><a href="#Queue" class="headerlink" title="Queue"></a>Queue</h3><p>​队列</p><p>​具体实现类：ArrayBlockingQueue</p><h4 id="ArrayBlockingQueue"><a href="#ArrayBlockingQueue" class="headerlink" title="ArrayBlockingQueue"></a>ArrayBlockingQueue</h4><p>ArrayBlockingQueue&#x3D;Array(数组)+Blocking(阻塞,队列有限)+Queue（队列）</p><h5 id="构造方法-3"><a href="#构造方法-3" class="headerlink" title="构造方法"></a>构造方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">ArrayBlockingQueue</span> <span class="variable">queue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayBlockingQueue</span>(<span class="type">int</span> size);<span class="comment">//输入容量</span></span><br></pre></td></tr></table></figure><h5 id="增-3"><a href="#增-3" class="headerlink" title="增"></a>增</h5><h6 id="add方法"><a href="#add方法" class="headerlink" title="add方法"></a>add方法</h6><blockquote><p>在队列的尾部添加元素，返回true。当队列满的时候会抛出IllegalStateException异常。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="title function_">add</span><span class="params">(E e)</span></span><br></pre></td></tr></table></figure><h6 id="put方法"><a href="#put方法" class="headerlink" title="put方法"></a>put方法</h6><blockquote><p>在队列的尾部添加元素，如果队列已满，则会阻塞住，等待队列有空闲位置，该方法可被打断。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">put</span><span class="params">(E e)</span> <span class="keyword">throws</span> InterruptedException</span><br></pre></td></tr></table></figure><h6 id="offer方法"><a href="#offer方法" class="headerlink" title="offer方法"></a>offer方法</h6><blockquote><p>超出队列最大值，不会报错，返回false</p><ul><li>e：添加的元素</li><li>timeout：最多等待的时长</li><li>unit：时间单位</li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="title function_">offer</span><span class="params">(E e)</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">offer</span><span class="params">(E e, <span class="type">long</span> timeout, TimeUnit unit)</span> <span class="keyword">throws</span> InterruptedException</span><br><span class="line"><span class="comment">//添加数据成功，则返回true</span></span><br><span class="line"><span class="comment">//添加数据失败，则返回false</span></span><br></pre></td></tr></table></figure><h5 id="取"><a href="#取" class="headerlink" title="取"></a>取</h5><h6 id="poll方法"><a href="#poll方法" class="headerlink" title="poll方法"></a>poll方法</h6><blockquote><p>先进先出</p><p>获取队列中队首的元素，获取后该元素就会移除该队列</p></blockquote><ul><li>timeout：等待时长</li><li>unit：时间单位</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//立即返回</span></span><br><span class="line">E <span class="title function_">poll</span><span class="params">()</span></span><br><span class="line"><span class="comment">//如果不能立即取出，则等待一定时间</span></span><br><span class="line">E <span class="title function_">poll</span><span class="params">(<span class="type">long</span> timeout, TimeUnit unit)</span> <span class="keyword">throws</span> InterruptedException</span><br></pre></td></tr></table></figure><blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">queue.offer(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">queue.offer(<span class="string">&quot;李四&quot;</span>);</span><br><span class="line">queue.offer(<span class="string">&quot;王五&quot;</span>);</span><br><span class="line">System.out.println(queue.poll());</span><br><span class="line">System.out.println(queue);</span><br></pre></td></tr></table></figure><p>输出为</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">张三</span><br><span class="line">[李四, 王五]</span><br></pre></td></tr></table></figure></blockquote><p>**注：**当队列里面所有数据全部取出后，继续取出queue.poll(),则返回null</p><h6 id="take方法"><a href="#take方法" class="headerlink" title="take方法"></a>take方法</h6><blockquote><p>获取队列中的元素，如果没有则会被阻塞住。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">E <span class="title function_">take</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException</span><br></pre></td></tr></table></figure><h6 id="peek方法"><a href="#peek方法" class="headerlink" title="peek方法"></a>peek方法</h6><blockquote><p>读取队列中队首的元素，不会删除该元素。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">E <span class="title function_">peek</span><span class="params">()</span></span><br></pre></td></tr></table></figure><h5 id="删-3"><a href="#删-3" class="headerlink" title="删"></a>删</h5><h6 id="remove方法"><a href="#remove方法" class="headerlink" title="remove方法"></a>remove方法</h6><blockquote><p>删除队列中指定元素</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="title function_">remove</span><span class="params">(Object o)</span></span><br></pre></td></tr></table></figure><h5 id="其他方法"><a href="#其他方法" class="headerlink" title="其他方法"></a>其他方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="title function_">contains</span><span class="params">(Object o)</span>;<span class="comment">//查询队列中是否存在某个元素</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">remainingCapacity</span><span class="params">()</span>;<span class="comment">//返回队列中剩余空闲位置</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">drainTo</span><span class="params">(Collection&lt;? <span class="built_in">super</span> E&gt; c)</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">drainTo</span><span class="params">(Collection&lt;? <span class="built_in">super</span> E&gt; c, <span class="type">int</span> maxElements)</span>;</span><br><span class="line"><span class="comment">//将队列中的元素排到指定集合中</span></span><br><span class="line"><span class="comment">//c：目标集合</span></span><br><span class="line"><span class="comment">//maxElements：最多排几个元素</span></span><br></pre></td></tr></table></figure><h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><p>具体实现：HashMap，Hastable</p><h3 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h3><blockquote><p><code>HashMap</code>是一个散列表，它存储键值对（key-value pairs），每个键对应一个唯一的值。<code>HashMap</code>不保证顺序，并且允许<code>null</code>值作为键或值。</p></blockquote><h4 id="构造方法-4"><a href="#构造方法-4" class="headerlink" title="构造方法"></a>构造方法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HashMap&lt;Integer, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br></pre></td></tr></table></figure><h4 id="增-改"><a href="#增-改" class="headerlink" title="增 改"></a>增 改</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">E <span class="title function_">put</span><span class="params">(K key, V value)</span>;</span><br><span class="line"><span class="comment">//获取与指定键 key 相关联的前一个值。如果不存在针对该键 key 的映射关系，那么就返回 null</span></span><br></pre></td></tr></table></figure><blockquote><p>改动value时</p><p>接下来我们探讨Key的值不可重复（当Key的值重复的时候，后面插入的对象会将之前插入的具有相同的Key值的对象覆盖掉），Value的值可重复</p></blockquote><h4 id="查-2"><a href="#查-2" class="headerlink" title="查"></a>查</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">V <span class="title function_">get</span><span class="params">(K key)</span>;</span><br></pre></td></tr></table></figure><h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><blockquote><p>返回被删除的键值对的值</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">K <span class="title function_">remove</span><span class="params">(K key)</span>;</span><br></pre></td></tr></table></figure><h4 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(String key : map.keySet())&#123;</span><br><span class="line">    System.out.println(key + <span class="string">&quot;=&quot;</span> + map.get(key));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h4><p><code>containsValue</code>:判断<code>HashMap</code>是否包含指定的值，返回<code>true</code>或者<code>false</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="title function_">containsValue</span><span class="params">(V value)</span></span><br></pre></td></tr></table></figure><p><code>keySet()</code>:返回<code>HashMap</code>中所有键的<code>Set</code>视图。通过这个<code>Set</code>可以遍历<code>HashMap</code>中的所有键</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Set&lt;K&gt; <span class="title function_">keySet</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><p><code>values()</code>:返回<code>HashMap</code>中所有值的<code>Collection</code>视图。可以用于遍历<code>HashMap</code>中的所有值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Collection&lt;V&gt; <span class="title function_">values</span><span class="params">()</span>；</span><br></pre></td></tr></table></figure><p><code>entrySet()</code>:返回<code>HashMap</code>中所有键值对的<code>Set</code>视图，其中每个元素都是<code>Map.Entry</code>类型。可以用于同时遍历键和值</p><blockquote><p>通过遍历这个<code>Set</code>，可以同时访问<code>HashMap</code>中的键和值，这在需要对键值对进行操作（如打印、修改或删除）时非常有用</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(Map.Entry&lt;String, String&gt; entry : map.entrySet())&#123;</span><br><span class="line">            <span class="keyword">if</span> (entry.getKey().equals(<span class="string">&quot;key1&quot;</span>))&#123;</span><br><span class="line">                entry.setValue(<span class="string">&quot;ddd&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> java基础 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
